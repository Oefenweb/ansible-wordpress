# tasks file
---
- name: plugins | identify installation
  ansible.builtin.command: >
    wp-cli --allow-root --no-color --path='{{ item.0.path }}' plugin is-installed {{ item.1.name }}
  register: _check_installation_plugins
  failed_when: false
  changed_when: false
  with_subelements:
    - "{{ wordpress_installs }}"
    - plugins
  when: item.1
  tags:
    - wordpress-plugins-is-installed-plugin

- name: plugins | install | wordpress.org
  ansible.builtin.command: >
    wp-cli --allow-root --no-color --path='{{ item.item.0.path }}'
    {{ '--force' if item.item.1.force | default(false) else '' }} plugin install {{ item.item.1.name }}
  changed_when: true
  with_items: "{{ _check_installation_plugins.results | default([]) }}"
  when:
    - item.item.1.name
    - not item.item.1.zip | default(false)
    - not item.item.1.url | default(false)
    - item.rc != 0
  tags:
    - wordpress-plugins-install-plugin
    - wordpress-plugins-install-plugin-wordpress_org

- name: plugins | install | zip | copy
  ansible.builtin.copy:
    src: "{{ item.item.1.zip }}"
    dest: "{{ wordpress_data_path }}/plugins/{{ item.item.1.name }}.zip"
    owner: root
    group: root
    mode: 0644
  with_items: "{{ _check_installation_plugins.results | default([]) }}"
  when:
    - item.item.1.name
    - item.item.1.zip | default(false)
    - not item.item.1.url | default(false)
    - item.rc != 0
  tags:
    - wordpress-plugins-install-plugin
    - wordpress-plugins-install-plugin-zip
    - wordpress-plugins-install-plugin-zip-copy

- name: plugins | install | zip | install
  ansible.builtin.command: >
    wp-cli --allow-root --no-color --path='{{ item.item.0.path }}'
    {{ '--force' if item.item.1.force | default(false) else '' }} plugin install {{ wordpress_data_path }}/plugins/{{ item.item.1.name }}.zip
  changed_when: true
  with_items: "{{ _check_installation_plugins.results | default([]) }}"
  when:
    - item.item.1.name
    - item.item.1.zip | default(false)
    - not item.item.1.url | default(false)
    - item.rc != 0
  tags:
    - wordpress-plugins-install-plugin
    - wordpress-plugins-install-plugin-zip
    - wordpress-plugins-install-plugin-zip-install

- name: plugins | install | url
  ansible.builtin.command: >
    wp-cli --allow-root --no-color --path='{{ item.item.0.path }}'
    {{ '--force' if item.item.1.force | default(false) else '' }} plugin install {{ item.item.1.url }}
  changed_when: true
  with_items: "{{ _check_installation_plugins.results | default([]) }}"
  when:
    - item.item.1.name
    - not item.item.1.zip | default(false)
    - item.item.1.url | default(false)
    - item.rc != 0
  tags:
    - wordpress-plugins-install-plugin
    - wordpress-plugins-install-plugin-url

- name: plugins | check install
  ansible.builtin.command: >
    wp-cli --allow-root --no-color --path='{{ item.0.path }}' plugin is-installed {{ item.1.name }}
  changed_when: false
  with_subelements:
    - "{{ wordpress_installs }}"
    - plugins
  when: item.1.name
  tags:
    - wordpress-plugins-check-install-plugin

- name: plugins | activate
  ansible.builtin.command: >
    wp-cli --allow-root --no-color --path='{{ item.0.path }}' plugin activate {{ item.1.name }}
  register: _check_activate_plugin
  changed_when: "'Success: Plugin' in _check_activate_plugin.stdout and not 'already' in _check_activate_plugin.stdout"
  with_subelements:
    - "{{ wordpress_installs }}"
    - plugins
  when:
    - item.1.name
    - item.1.activate | default(true)
  tags:
    - wordpress-plugins-activate-plugin

- name: plugins | deactivate
  ansible.builtin.command: >
    wp-cli --allow-root --no-color --path='{{ item.0.path }}' plugin deactivate {{ item.1.name }}
  register: _check_deactivate_plugin
  changed_when: "'Success: Plugin' in _check_deactivate_plugin.stdout and not 'already' in _check_deactivate_plugin.stdout"
  with_subelements:
    - "{{ wordpress_installs }}"
    - plugins
  when:
    - item.1.name
    - not item.1.activate | default(true)
  tags:
    - wordpress-plugins-deactivate-plugin
